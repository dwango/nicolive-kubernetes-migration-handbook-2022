<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>スケーリング on ニコニコ生放送 Webフロントエンド Kubernetes移行ハンドブック 2022</title><link>https://dwango.github.io/nicolive-kubernetes-migration-handbook-2022/docs/scalability/</link><description>Recent content in スケーリング on ニコニコ生放送 Webフロントエンド Kubernetes移行ハンドブック 2022</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><atom:link href="https://dwango.github.io/nicolive-kubernetes-migration-handbook-2022/docs/scalability/index.xml" rel="self" type="application/rss+xml"/><item><title>水平スケール</title><link>https://dwango.github.io/nicolive-kubernetes-migration-handbook-2022/docs/scalability/horizontal-pod-autoscaler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwango.github.io/nicolive-kubernetes-migration-handbook-2022/docs/scalability/horizontal-pod-autoscaler/</guid><description>水平スケール # Kubernetesは監視しているCPU使用率などのMetricsをもとにPodの数を自動的にスケーリングさせる機構、Horizontal Pod Autoscalingを持っています。 metrics serverを利用するとCPU使用率やMemory使用量をベースに水平スケールを支援してくれます。
Horizontal Pod Autoscaler # Horizontal Pod Autoscaler（以下HPA）は観測されたMetricsを元に指定のPodのreplicasを増減させる仕組みです。 Manifestの書き方はシンプルで、autoscaling/v2beta2で記述すると次のようになります。
apiVersion: autoscaling/v2beta2 kind: HorizontalPodAutoscaler metadata: name: myapp spec: minReplicas: 10 maxReplicas: 20 scaleTargetRef: kind: Deployment # Argo Rolloutsを使用している場合は Rollout を指定する apiVersion: argoproj.io/v1alpha1 name: myapp metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 80 これは探索されたPodのCPU使用率が80%を超えるようになった場合に、それを下回るようにPod数を増加させます。 逆に下回った場合はminReplicasまで戻るように働きます。
注意点として、</description></item></channel></rss>